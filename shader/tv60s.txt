uniform shader iChunk;
uniform float2 iChunkSize;
uniform float iFrame;

const float LENGTH = 120.0;
const float STRENGTH = 0.0001;
const float SPEED = 1.2;

float random(float seed)
{
    return fract(sin(seed) * 43758.5453);
}

vec3 toHSL(vec4 color, vec3 tint)
{
    return vec4(color.rgb * tint, color.a);
}

vec4 main(vec2 xy) 
{
    vec2 uv = xy / iChunkSize.xy;
    uv.y += sin(xy.x / LENGTH + pow(iFrame, SPEED)) * STRENGTH;
    uv.y += tan((xy.x + (random(iFrame) * 120.0)) / LENGTH + pow(iFrame, SPEED)) * STRENGTH;
    uv.y += tan((xy.x + (random(iFrame - 4.0) * 1200.0)) / LENGTH + pow(iFrame, SPEED)) * STRENGTH;
    uv.y += tan((xy.x + (random(iFrame - 47.0) * 1200.0)) / LENGTH + pow(iFrame, SPEED)) * STRENGTH;

    vec4 color = iChunk.eval(uv * iChunkSize.xy);
    vec3 tint = vec3(0.7, 0.7, 0.7); // Modify the tint color here
    return  = applyTint(color, tint);
}
